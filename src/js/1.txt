  constructor (options) {
    const flagCheckIdEmail = this.checkIdEmail(options)

    let flagLoadInfo = false
    this.loadInfo()
      .done((info) => {
        this.info = info
        flagLoadInfo = true
      })
      .always(() => {
        if (flagCheckIdEmail && flagLoadInfo) {
          this.emailForm.keypress((event) => {
            if (event.which === 13) {
              event.preventDefault()
              this.checkIt()
              return true
            }
          })
        }
      })
    return false
  }

  checkIdEmail (options) {
    if ('idEmail' in options) {
      this.emailForm = $('#' + options.idEmail)
      if (this.emailForm.length !== 0) {
        return true
      }
    }
    return false
  }

  loadInfo () {
      return $.get('json/info.json')
        .then((info) => {
          return info
        })
        .fail((error) => {
          this.onCatchError(error)
        })
    }

Swal.fire({
  title: 'Submit your Github username',
  input: 'text',
  inputAttributes: {
    autocapitalize: 'off'
  },
  showCancelButton: true,
  confirmButtonText: 'Look up',
  showLoaderOnConfirm: true,
  preConfirm: (login) => {
    return fetch(`//api.github.com/users/${login}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(response.statusText)
        }
        return response.json()
      })
      .catch(error => {
        Swal.showValidationMessage(
          `Request failed: ${error}`
        )
      })
  },
  allowOutsideClick: () => !Swal.isLoading()
}).then((result) => {
  if (result.value) {
    Swal.fire({
      title: `${result.value.login}'s avatar`,
      imageUrl: result.value.avatar_url
    })
  }
})